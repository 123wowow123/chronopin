apiVersion: apps/v1
kind: Deployment
metadata:
  name: chronopin
  labels:
    app: chronopin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: website
      role: frontend
  template:
    metadata:
      labels:
        app: website
        role: frontend
    spec:
      containers:
      - name: chronopin
        image: us-west1-docker.pkg.dev/chronopin-209507/chronopin-web/chronopin:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 9000
          protocol: TCP
        # - containerPort: 80
        # - containerPort: 443
        # command: [ "/bin/sh", "-c", "echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)" ]
        # command: [ "/bin/sh", "-c", "env" ]
        envFrom:
        - configMapRef:
            name: env-file
      imagePullSecrets:
      - name: regcred

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: isso-claim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-rwo

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chronopin-comment
  labels:
    app: chronopin-comment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: comment
      role: frontend
  template:
    metadata:
      labels:
        app: comment
        role: frontend
    spec:
      containers:
      - name: chronopin-comment
        image: us-west1-docker.pkg.dev/chronopin-209507/chronopin-comment/isso:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        # - mountPath: /config
        #   name: isso-vol
        - mountPath: /db
          name: isso-vol
        readinessProbe:
          httpGet:
            path: /js/embed.min.js
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5
          # command: ["/bin/mkdir", "-p", "/db"]
          # command: ["/bin/sh", "-c", "mkdir -p 'config/' && printf '[general]\ndbpath = /db/comments.db\nhost =\n    http://localhost:9000/\n    http://www.chronopin.com/\n    https://www.chronopin.com/' > config/isso.cfg && cat 'config/isso.cfg'"]
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: isso-vol
        persistentVolumeClaim:
          claimName: isso-claim

---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: chronopin-comment-managed-cert
spec:
  domains:
  - comment.chronopin.com

---
apiVersion: v1
kind: Service
metadata:
  name: chronopin-comment-np
spec:
  type: NodePort
  selector:
    app: comment
    role: frontend
  ports:
  - protocol: TCP
    port: 80
    name: http
    targetPort: 8080
    # - protocol: TCP
    #   port: 443
    #   targetPort: 8080
    #   name: https
    # - protocol: TCP
    #   port: 8443
    #   targetPort: 8080
    #   name: https2

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chronopin-comment-managed-cert-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: chronopin-comment-ip
    networking.gke.io/managed-certificates: chronopin-comment-managed-cert
    kubernetes.io/ingress.class: gce
spec:
  defaultBackend:
    service:
      name: chronopin-comment-np
      port:
        number: 80
---
# apiVersion: v1
# kind: Service
# metadata:
#   name: comment-lb
# spec:
#   type: LoadBalancer
#   ports:
#   - port: 80
#     protocol: TCP
#     name: http
#     targetPort: 8080
#   selector:
#     app: comment
#     role: frontend

---
# apiVersion: v1
# kind: Service
# metadata:
#   name: chronopin-lb
# spec:
#   type: LoadBalancer
#   ports:
#   # - port: 443
#   #   protocol: TCP
#   #   name: https
#   - port: 80
#     protocol: TCP
#     name: http
#     targetPort: 9000
#   selector:
#     app: website
#     role: frontend
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: chronopin-managed-cert
spec:
  domains:
  - chronopin.com
  - www.chronopin.com

---
apiVersion: v1
kind: Service
metadata:
  name: chronopin-np
spec:
  type: NodePort
  selector:
    app: website
    role: frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9000

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chronopin-managed-cert-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: chronopin-ip
    networking.gke.io/managed-certificates: chronopin-managed-cert
    kubernetes.io/ingress.class: gce
spec:
  defaultBackend:
    service:
      name: chronopin-np
      port:
        number: 80
